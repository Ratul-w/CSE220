Singly LinkedList

Task1:

def alternate_merge(head1, head2):
  if head1==None:
    return head2
  if head2 ==None:
    return head1
  s1=head1
  s2=head2
  h1=s1
  s1=s1.next
  t1=h1
  while s2!=None:
    t1.next=s2
    t1=t1.next
    s2=s2.next
    if s1==None:
      break
    t1.next=s1
    t1=t1.next
    s1=s1.next

  return h1

Task2:

def word_Decoder(head):
    c_1 = 0
    t_1 = head
    while t_1 != None:
        c_1 += 1
        t_1 = t_1.next

    x = 13 % c_1  
    i_1 = 0
    t_1 = head
    c_1 = 1
    new_head = None
    tail = None
    
    while t_1 != None:
        if i_1 % x == 0:
            if i_1 != 0: 
                if c_1 == 1:
                    new_head = Node(t_1.elem)  
                    tail = new_head
                    c_1 += 1
                else:
                    tail.next = Node(t_1.elem) 
                    tail = tail.next
        i_1 += 1
        t_1 = t_1.next

    dummyhead = Node(None)
    dummyhead.next = rev(new_head)
    return dummyhead

def rev(head):
    p1 = None
    c12 = head
    while c12!=None:
        n_n1 = c12.next
        c12.next = p1
        p1 = c12
        c12 = n_n1
    return p1

Task3:

def idGenerator(head1, head2, head3):
    sum_elem = head2.elem + head3.elem
    if sum_elem >= 10:
        head = Node(sum_elem % 10)
    else:
        head = Node(sum_elem)
    t1 = head
    head2 = head2.next
    head3 = head3.next
    while head2 != None:
        sum_elem = head2.elem + head3.elem
        if sum_elem >= 10:
            t1.next = Node(sum_elem % 10)
            t1 = t1.next
        else:
            t1.next = Node(sum_elem)
            t1 = t1.next
        head2 = head2.next
        head3 = head3.next
    r_l = rev(head1)
    while head1.next != None:
        head1 = head1.next
    head1.next = head
    return r_l
def rev(head):
    p1 = None
    c12 = head
    while c12!=None:
        n_n1 = c12.next
        c12.next = p1
        p1 = c12
        c12 = n_n1
    return p1

Doubly Linked List

Task4 

class Patient:
  def __init__(self, id, name, age, bloodgroup, next, prev):
    self.id = id
    self.name = name
    self.age = age
    self.bloodgroup = bloodgroup
    self.next = next
    self.prev = prev

class WRM:

  def __init__(self):
    
    self.dh = Patient(None,None,None,None,None,None)
    self.dh.next = self.dh
    self.dh.prev = self.dh

  def registerPatient(self, id, name, age, bloodgroup):
    n1_new = Patient(id, name, age, bloodgroup)
    n1_new.prev = self.dh.prev
    n1_new.next = self.dh
    self.dh.prev.next = n1_new
    self.dh.prev = n1_new

  def servePatient(self):
      if self.dh.next == self.dh:
          print("No patients to serve.")
          return
      se_1 = self.dh.next
      print(f"{se_1.name} is served")
      self.dh.next = se_1.next
      se_1.next.prev = self.dh

  def showAllPatients(self):
      if self.dh.next == self.dh:
          print("No patients in the queue.")
          return
      c1 = self.dh.next
      while c1 != self.dh:
          print(f"ID: {c1.id}\nName: {c1.name}\nAge: {c1.age}\nBlood Group: {c1.bgroup}\n============================")
          c1 = c1.next

  def canDoctorGoHome(self):
      return self.dh.next == self.dh and self.dh.prev == self.dh

  def cancelAll(self):
      self.dh.next = self.dh
      self.dh.prev = self.dh
      print("All patients cancelled.")

  def reverseTheLine(self):
      if self.dh.next == self.dh:
          print("No patients to reverse.")
          return
      c1 = self.dh
      while True:
          c1.next,c1.prev=c1.prev,c1.next
          c1 = c1.prev
          if c1 == self.dh:
              break
#Write a Tester Code in this cell
print("**Welcome to Waiting Room Management System**")
wrm = WRM()
while True :
    print("**Choose an Option**")
    print("1. RegisterPatient()\n2. ServePatient()\n3. CancelAll()\n4. CanDoctorGoHome()\n5. ShowAllPatient()\n6. ReversePatientQueue()\n7. Exit\n=======================")
    x = int(input("Enter your choice: "))
    if x == 1 :
        print("Executing registering Patient...")
        id = int(input("Enter ID: "))
        name = input("Enter Name: ")
        age = int(input("Enter age: "))
        bl_grp = input("Enter Blood Group: ")
        print("Successfully registering Patient...")
        print("Successful")
        wrm.registerPatient(id, name, age, bl_grp)
    elif x == 2 :
        wrm.servePatient()
    elif x == 3 :
        print("Cancelled All Reveservation")
        wrm.cancelAll()
    elif x == 4 :
        if wrm.canDoctorGoHome() :
            print("Yess!! Doctor can go home.")
        else :
            print("No. There are patient(s) in line")
    elif x == 5 :
        print("Showing Patient(s) info")
        wrm.showAllPatient()
    elif x == 6 :
        print("Revering Patient Queue...")
        wrm.ReverseTheLine()
        print("Reversed Successful !!")
    else :
        print("Exiting...")
        break

