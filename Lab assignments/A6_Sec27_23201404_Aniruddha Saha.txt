#Task1
def convert_mirror(root):
  if root == None:
    return

  root.left,root.right=root.right,root.left
  convert_mirror(root.left)
  convert_mirror(root.right)
  return root


#Task2

def smallest_level(root, level = {}, i = 0):
  if root==None:
    return
  if i not in level.keys():
    level[i]=root.elem
  elif level[i]>root.elem:
    level[i]=root.elem
  smallest_level(root.left, level, i+1)
  smallest_level(root.right, level, i+1)
  return level


#Task3

def sumTree(root):
  def help_fun(n,l):
    if n==None:
      return 0
    if l==0:
      return n.elem+help_fun(n.left,l+1)+help_fun(n.right,l+1)
    return (n.elem%l)+help_fun(n.left,l+1)+help_fun(n.right,l+1)
  return help_fun(root, 0)


#Task4

def swap_child(root, level, M):
  if root == None or level == M :
    return
  root.left, root.right = root.right, root.left
  swap_child(root.left, level+1, M)
  swap_child(root.right, level+1, M)
  return root

#Write other nodes by yourself from the given tree of Doc File
n1=BTNode('B')
n2=BTNode('C')
n3=BTNode('D')
n4=BTNode('E')
n5=BTNode('F')
n6=BTNode('G')
n7=BTNode('H')
n8=BTNode('I')
n9=BTNode('J')
root.left = n1
root.right = n2
n1.left = n3
n1.right = n4
n2.right = n5
n3.left = n6
n3.right = n7
n4.left = n8
n5.left = n9

#Task 5

def sum_func(root, level=1) :
    if root == None :
        return -1
    return (root.elem) + sum_func(root.left, level + 1) + sum_func(root.right, level+1)
def subtract_summation(root):
  I = sum_func(root.left)
  J = sum_func(root.right)
  return I-J

#Write other nodes by yourself from the given tree of Doc File
n1=BTNode(27)
n2=BTNode(80)
n3=BTNode(75)
n4=BTNode(87)
n5=BTNode(56)
n6=BTNode(62)
n7=BTNode(41)
n8=BTNode(3)
n9=BTNode(19)
n10=BTNode(89)

root.left = n1
root.right = n6
n1.left = n2
n1.right = n3
n2.left = n4
n2.right = n5
n6.left = n7
n6.right = n8
n8.left = n9
n8.right = n10


#Task 6

def level_sum(root):
  def helperfunc(n,lev):
    if n==None:
      return 0
    elif lev%2==0:
      return -n.elem+helperfunc(n.left, lev + 1) + helperfunc(n.right, lev + 1)
    else:
      return n.elem+helperfunc(n.left, lev + 1) + helperfunc(n.right, lev + 1)
  return helperfunc(root,0)